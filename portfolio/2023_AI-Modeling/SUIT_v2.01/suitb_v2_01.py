# -*- coding: utf-8 -*-

import numpy as np
import pandas as pd
import warnings
warnings.filterwarnings(action='ignore')
from collections import Counter
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.preprocessing import StandardScaler, LabelEncoder, MultiLabelBinarizer
from sklearn.metrics import accuracy_score, mean_squared_error, r2_score
import tensorflow as tf
import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LeakyReLU
from tensorflow.keras.models import load_model
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
torch.manual_seed(1)
import time
import copy
import random

seed = 7777
random.seed(seed)
np.random.seed(seed)
torch.manual_seed(seed)
torch.cuda.manual_seed_all(seed)

name_num_lst = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
 81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,
 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,
 131, 132, 133, 134, 135, 136, 137, 138, 139, 140,
 141, 142, 143, 144, 145, 146, 147, 148, 149, 150,
 151, 152, 153, 154, 155, 156, 157, 158, 159, 160,
 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
 171, 172, 173, 174, 175, 176, 177, 178, 179, 180,
 181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,
 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
 211, 212, 213, 214, 215, 216, 217, 218, 219, 220,
 221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
 241, 242, 243, 244, 245, 246, 247, 248, 249, 250,
 251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
 271, 272, 273, 274, 275, 276, 277, 278, 279, 280,
 281, 282, 283, 284, 285, 286, 287, 288, 289, 290,
 291, 292, 293, 294, 295, 296, 297, 298, 299, 300]

num_to_name_dict = {0: '블루포인트파트너스', 1: '마크앤컴퍼니', 2: '라구나인베스트먼트', 3: '윤민창의투자재단', 4: '매쉬업엔젤스',  5: '삼성벤처투자',
                6: '케이브릿지인베스트먼트', 7: '크립톤', 8: '네이버', 9: '롯데벤처스', 10: '카카오벤처스', 11: '넥스트랜스', 12: '미래과학기술지주',
                13: '인포뱅크', 14: '스파크랩', 15: '더벤처스', 16: '스트롱벤처스', 17: '제이비인베스트먼트', 18: '아이비케이기업은행',
                19: '인라이트벤처스', 20: '씨엔티테크', 21: '퓨처플레이', 22: '베이스인베스트먼트', 23: '한국투자파트너스', 24: '패스트벤처스',
                25: '뉴패러다임인베스트먼트', 26: '신용보증기금', 27: '대경지역대학공동기술지주', 28: '와이앤아처', 29: '스프링캠프', 30: '제이비벤처스',
                31: '에이벤처스', 32: '소풍벤처스', 33: '미래에셋캐피탈', 34: '현대자동차', 35: '브이엔티지', 36: '프라이머', 37: '은행권청년창업재단',
                38: '더웰스인베스트먼트', 39: '유니온투자파트너스', 40: '비에이파트너스', 41: '비하이인베스트먼트', 42: '케이클라비스인베스트먼트',
                43: '디에이밸류인베스트먼트', 44: '비에스케이인베스트먼트', 45: '신한대체투자운용',  46: '네오플라이', 47: '프라이머사제파트너스',
                48: '아이엠엠인베스트먼트', 49: '케이비인베스트먼트', 50: '신한캐피탈', 51: '만도', 52: '시그나이트파트너스', 53: '캡스톤파트너스',
                54: '에이치지이니셔티브', 55: '해시드', 56: '더인벤션랩', 57: '위벤처스', 58: '두나무앤파트너스', 59: '소프트뱅크벤처스',
                60: '넥스트지인베스트먼트', 61: '아이디벤처스', 62: '씨제이이엔엠', 63: '(구)넥스트지인베스트먼트', 64: '스마일게이트인베스트먼트',
                65: '하나벤처스', 66: '디에스씨인베스트먼트', 67: '신한벤처투자', 68: '엔베스터', 69: '에스오피오오엔지', 70: '디쓰리쥬빌리파트너스',
                71: '중소벤처기업진흥공단', 72: '김기사랩', 73: '유진증권', 74: '벤처스퀘어', 75: '스톤브릿지벤처스', 76: '한국산업은행',
                77: '우리벤처파트너스', 78: '티그리스인베스트먼트', 79: '메디치인베스트먼트', 80: '대신증권', 81: '한국벤처투자', 82: '연세대학교기술지주',
                83: '고려대학교기술지주회사', 84: '씨앤벤처파트너스', 85: '블록크래프터스', 86: '슈미트', 87: '본엔젤스벤처파트너스', 88: '녹십자',
                89: '에스브이인베스트먼트', 90: '펄어비스캐피탈', 91: '인터베스트', 92: '신한은행', 93: '에이치비인베스트먼트', 94: '아이비케이캐피탈',
                95: '에스비파트너스', 96: '엔에이치투자증권', 97: '티에스인베스트먼트', 98: '경남창조경제혁신센터',  99: '서울대학교기술지주',
                100: '포항공과대학교기술지주', 101: '파트너스인베스트먼트', 102: '컴퍼니케이파트너스', 103: '코오롱인베스트먼트', 104: '브리즈인베스트먼트',
                105: '씨제이인베스트먼트', 106: '디지털헬스케어파트너스', 107: '쿨리지코너인베스트먼트', 108: '디티앤인베스트먼트', 109: '에이티넘인베스트먼트',
                110: '우리은행', 111: '리벤처스', 112: '빅베이슨캐피탈', 113: '인터밸류파트너스', 114: '타임폴리오자산운용', 115: '유티씨인베스트먼트',
                116: '포스코기술투자', 117: '케이티인베스트먼트', 118: '빅뱅엔젤스', 119: '미래에셋벤처투자', 120: '뮤렉스파트너스', 121: '엘비인베스트먼트',
                122: '옐로우독', 123: '하나은행', 124: '컴퍼니비', 125: '서울산업진흥원', 126: '하나금융지주', 127: '스틱벤처스', 128: '에트리홀딩스',
                129: '카이트창업가재단', 130: '케이투인베스트먼트파트너스', 131: '인사이트에퀴티파트너스', 132: '엘앤에스벤처캐피털', 133: '프리미어파트너스',
                134: '어니스트벤처스', 135: '현대기술투자', 136: '에스엘인베스트먼트', 137: '에스비아이인베스트먼트', 138: '서울투자파트너스',
                139: '카카오인베스트먼트', 140: '패스트인베스트먼트', 141: '코리아오메가투자금융', 142: '원익투자파트너스', 143: '유경피에스지자산운용',
                144: '세종벤처파트너스', 145: '디에스자산운용', 146: '500글로벌', 147: '굿워터캐피털', 148: '알토스벤처스', 149: '크릿벤처스',
                150: '기술보증기금', 151: '이베스트투자증권', 152: '아주아이비투자', 153: '부산대학교기술지주', 154: '데일리파트너스',
                155: '대경인베스트먼트', 156: '카이스트청년창업투자지주', 157: '현대차증권', 158: '엔비에이치캐피탈', 159: '보광인베스트먼트',
                160: '지에스리테일', 161: '케이비증권', 162: '대교인베스트먼트', 163: '신한투자증권', 164: '에스케이텔레콤', 165: '키움인베스트먼트',
                166: '아이비케이투자증권', 167: '야놀자', 168: '에스케이증권', 169: '대덕벤처파트너스', 170: '나이스투자파트너스', 171: '티비티',
                172: '마젤란기술투자', 173: '다래전략사업화센터', 174: '아모레퍼시픽', 175: '우신벤처투자', 176: '휴맥스', 177: '부산지역대학연합기술지주',
                178: '비엔케이벤처투자', 179: '쿼드벤처스', 180: '에이아이엔젤클럽', 181: '오픈워터인베스트먼트', 182: '코리아에셋투자증권',
                183: '와디즈파트너스', 184: '넥스트드림엔젤클럽', 185: '케이앤투자파트너스', 186: '전북지역대학연합기술지주회사', 187: '울산창조경제혁신센터',
                188: '메이플투자파트너스', 189: '한국투자증권', 190: '이앤벤처파트너스', 191: '에이지인베스트먼트', 192: '이에스인베스터',
                193: '한양대학교기술지주회사', 194: '라이트하우스컴바인인베스트', 195: '와이컴비네이터', 196: '나우아이비캐피탈', 197: '한국성장금융투자운용',
                198: '퀀텀벤처스코리아', 199: '전남대학교기술지주회사', 200: '킹슬리벤처스', 201: '마그나인베스트먼트', 202: '솔리더스인베스트먼트',
                203: '티인베스트먼트', 204: '에스제이투자파트너스', 205: '패스파인더에이치', 206: '스틱인베스트먼트', 207: '알바트로스인베스트먼트',
                208: '에버그린투자파트너스', 209: '엔슬파트너스', 210: '이수창업투자', 211: '케이티', 212: '카카오모빌리티', 213: '끌림벤처스',
                214: '스파크랩벤처스', 215: '엘지유플러스', 216: '인탑스인베스트먼트', 217: '비엔케이투자증권', 218: '퍼스트게이트', 219: '우미건설',
                220: '유안타인베스트먼트', 221: '지앤텍벤처투자', 222: '알펜루트자산운용', 223: '더존비즈온', 224: '동훈인베스트먼트',
                225: '레오파트너스인베스트먼트', 226: '현대투자파트너스', 227: '퀄컴벤처스', 228: '플래티넘기술투자', 229: '코로프라넥스트',
                230: '우리기술투자', 231: '아이피에스벤처스', 232: '로그인베스트먼트', 233: '플랜에이치벤처스', 234: '동문파트너즈', 235: '킹고스프링',
                236: '시너지아이비투자', 237: '탭엔젤파트너스', 238: '한국과학기술지주', 239: '비엔에이치인베스트먼트', 240: '어썸벤처스', 241: '유한양행',
                242: '에스케이', 243: '이노폴리스파트너스', 244: '린드먼아시아인베스트먼트', 245: '한화생명', 246: '큐더스벤처스', 247: '킹고투자파트너스',
                248: '삼호그린인베스트먼트', 249: '비전크리에이터', 250: '액트너랩', 251: '젠엑시스', 252: '수인베스트먼트캐피탈', 253: '엔텔스',
                254: '카카오', 255: '사제파트너스', 256: '창조투자자문', 257: '엔에이치엔인베스트먼트', 258: '엘에스케이인베스트먼트', 259: '어센도벤처스',
                260: '쿼드자산운용', 261: '송현인베스트먼트', 262: '케이런벤처스', 263: '대웅제약', 264: '메디톡스벤처투자', 265: '에스케이에스프라이빗에쿼티',
                266: '피앤아이인베스트먼트', 267: '텍톤벤처스', 268: '포메이션8', 269: '글로벌브레인', 270: '국민대학교기술지주', 271: '세마인베스트먼트',
                272: '원앤파트너스유한책임회사', 273: '미래에셋증권', 274: '키움증권', 275: '마이다스동아인베스트먼트', 276: '지에스홈쇼핑', 277: '농협은행',
                278: '충북창조경제혁신센터', 279: '삼성증권', 280: '케이비국민카드', 281: '얼머스인베스트먼트', 282: '로우파트너스', 283: '에스엠시노기술투자',
                284: '위드윈인베스트먼트', 285: '노틸러스인베스트먼트', 286: '캐피탈원', 287: '교보생명보험', 288: '하랑기술투자', 289: '코맥스벤처러스',
                290: '경기창조경제혁신센터', 291: '엑센트리벤처스', 292: '파인드어스', 293: '엔에이치엔', 294: '블리스바인벤처스',
                295: '한국바이오투자파트너스', 296: '스톤브릿지캐피탈', 297: '세쿼이아캐피탈', 298: '컴퍼니엑스', 299: '스케일업파트너스',
                300: '카카오엔터테인먼트'}

name_to_num_dict = {v: k for k, v in num_to_name_dict.items()}

class DNNet_type(nn.Module):
  def __init__(self, input_dim, output_dim):
    super(DNNet_type, self).__init__()
    self.input_dim = input_dim
    self.output_dim = output_dim
    self.fc1 = nn.Linear(input_dim, 64)
    self.fc2 = nn.Linear(64, 32)
    self.fc3 = nn.Linear(32, 16)
    self.output = nn.Linear(16, output_dim)
    self.sigmoid = nn.Sigmoid()

  def forward(self, x):
    x = x.to(torch.float32)
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = F.relu(self.fc3(x))
    x = self.sigmoid(self.output(x))
    return x

class DNNet_field(nn.Module):
  def __init__(self, input_dim, output_dim):
    super(DNNet_field, self).__init__()
    self.input_dim = input_dim
    self.output_dim = output_dim

    self.fc1 = nn.Linear(input_dim, 64)
    self.fc2 = nn.Linear(64, 32)
    self.output = nn.Linear(32, output_dim)
    self.sigmoid = nn.Sigmoid()

  def forward(self, x):
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = self.sigmoid(self.output(x))
    return x

# 모델 불러오기
input_type = 5
output_type = 10

model_type = DNNet_type(input_type, output_type)
model_type.load_state_dict(torch.load('model_type.pth'))
model_type.eval()

input_field = 13
output_field = 6

model_field = DNNet_field(input_field, output_field)
model_field.load_state_dict(torch.load('model_field.pth'))
model_field.eval()

model_name = load_model('inv_name.h5')

def inv_ftr(stup_ftr):
    #--------------------------------1st layer--------------------------------#
    stup_ftr = pd.DataFrame(stup_ftr)
    stup_ftr = stup_ftr.iloc[:1, :]

    stup_ftr['log_자산'] = np.log(stup_ftr['자산'])
    stup_ftr['log_부채'] = np.log(stup_ftr['부채'])
    stup_ftr['log_스타트업 고용인원'] = np.log(stup_ftr['스타트업 고용인원'])
    stup_ftr['log_투자유치금액'] = np.log(stup_ftr['투자유치금액'])

    stup_ftr = stup_ftr.drop(columns=['자산', '부채', '스타트업 고용인원', '투자유치금액'])

    x1 = stup_ftr[['투자단계', 'log_자산', 'log_부채', 'log_스타트업 고용인원', '영업이익']].copy()
    x2 = stup_ftr[['ICT제조', '기타', '바이오/의료', '영상/공연/음반', '투자단계', 'log_자산', 'log_부채', 'log_스타트업 고용인원', '스타트업 업력구간', '자본', '영업이익', '당기순이익', '스타트업 소재지역 도']].copy()

    x1 = torch.Tensor(x1.values)
    x2 = torch.Tensor(x2.values)

    new_type = model_type(x1)
    new_type = new_type.round()
    numpy_type = new_type.detach().numpy()
    df_type = pd.DataFrame(data=numpy_type, columns=["투자사 유형_1", "투자사 유형_2", "투자사 유형_3", "투자사 유형_4", "투자사 유형_5", "투자사 유형_6", "투자사 유형_7", "투자사 유형_8", "투자사 유형_9", "투자사 유형_10"])

    new_field = model_field(x2)
    new_field = new_field.round()
    numpy_field = new_field.detach().numpy()
    df_field = pd.DataFrame(data=numpy_field, columns=['ICT서비스', 'ICT제조', '기타', '바이오/의료', '영상/공연/음반', '유통/서비스'])

    with pd.ExcelWriter('./SUIT_inv_ftr_prediction.xlsx') as writer:
        df_type.to_excel(writer, sheet_name='예측된 투자사 유형', index=False)
        df_field.to_excel(writer, sheet_name='예측된 투자사 주요투자분야', index=False)

    df_level = stup_ftr[['투자단계', 'log_투자유치금액']]
    df_new = pd.concat([df_level, df_type, df_field], axis=1)

    return df_new

#--------------------------------2nd layer--------------------------------#
def inv_name(df_new):

    X = df_new.copy()
    y_pred_prob = model_name.predict(X)
    top_20_indices = np.argsort(y_pred_prob, axis=1)[:, -20:]

    with open('./SUIT_Results.txt', 'w') as file:
        for i, indices in enumerate(top_20_indices):
            file.write(f"Sample {i + 1}:\n")
            for j, index in enumerate(indices):
                probability = y_pred_prob[i][index]
                label = num_to_name_dict[index]  # 인덱스를 클래스 레이블(투자사명)로 변환
                file.write(f"  {j+1}. {label} (확률: {probability:.4f})\n")
            file.write("\n")

    return label

stup_input = pd.read_csv('SUIT_input_form.csv')

df_new = inv_ftr(stup_input)
labels = inv_name(df_new)